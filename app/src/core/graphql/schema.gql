input CreateGroupInput {
  avatarURL: String
  groupName: String!
  usersID: [ID!]!
}

input CreateTransactionInput {
  itemName: String!
  itemPrice: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group implements Node {
  activeOrder: OrderEdge
  avatarURL: String
  createdAt: DateTime!

  """The globally unique relay ID"""
  globalID: ID!
  groupName: String!
  id: ID!
  members: UserBalanceConnection!
  orders: OrderConnection!
  owner: UserEdge!
  updatedAt: DateTime!
}

type GroupBalanceConnection {
  edges: [GroupBalanceEdge!]
  pageInfo: PageInfo
}

type GroupBalanceEdge {
  balance: Float!
  cursor: String
  node: Group
}

type GroupEdge {
  cursor: String
  node: Group
}

type Mutation {
  createGroup(createGroupInput: CreateGroupInput!): Group!
  createOrder(groupID: String!): Order!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
}

interface Node {
  """The globally unique relay ID"""
  globalID: ID!
}

type Order implements Node {
  createdAt: DateTime!

  """The globally unique relay ID"""
  globalID: ID!
  group: GroupEdge!
  id: ID!
  isActive: Boolean!
  payer: UserEdge!
  transactions: TransactionConnection!
  updatedAt: DateTime!
}

type OrderConnection {
  edges: [OrderEdge!]
  pageInfo: PageInfo
}

type OrderEdge {
  cursor: String
  node: Order
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  group(id: String!): Group!
  me: User!
  order(id: String!): Order!
  transaction(id: String!): Transaction!
  user(id: String!): User!
}

type Transaction implements Node {
  createdAt: DateTime!

  """The globally unique relay ID"""
  globalID: ID!
  id: ID!
  itemName: String!
  itemPrice: Float
  order: OrderEdge!
  payer: UserEdge!
  recipient: UserEdge!
  updatedAt: DateTime!
}

type TransactionConnection {
  edges: [TransactionEdge!]
  pageInfo: PageInfo
}

type TransactionEdge {
  cursor: String
  node: Transaction
}

input UpdateOrderInput {
  id: String!
  isActive: Boolean!
}

input UpdateTransactionInput {
  id: String!
  itemName: String
  itemPrice: Float
}

type User implements Node {
  avatarURL: String
  createdAt: DateTime!
  firstName: String!

  """The globally unique relay ID"""
  globalID: ID!
  groups: GroupBalanceConnection!
  id: String!
  lastName: String!
  ordersPaid: OrderConnection!
  transactions: TransactionConnection!
  updatedAt: DateTime!
  username: String!
}

type UserBalanceConnection {
  edges: [UserBalanceEdge!]
  pageInfo: PageInfo
}

type UserBalanceEdge {
  balance: Float!
  cursor: String
  node: User
}

type UserEdge {
  cursor: String
  node: User
}
