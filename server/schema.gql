# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateGroupInput {
  avatarURL: String
  groupName: String!
  usersID: [ID!]!
}

input CreateTransactionInput {
  groupMemberID: ID!
  itemName: String!
  itemPrice: Float
  orderID: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteTransactionInput {
  groupMemberID: ID!
  orderID: ID!
}

type Group implements Node {
  activeOrder: OrderEdge
  avatarURL: String
  createdAt: DateTime!
  groupName: String!

  """globally unique ID"""
  id: ID!
  me: GroupMemberEdge!
  members: GroupMemberConnection!
  orders: OrderConnection!
  owner: UserEdge!
  updatedAt: DateTime!
}

type GroupEdge {
  cursor: String
  node: Group
}

type GroupMember implements Node {
  balance: Float!
  createdAt: DateTime!
  group: GroupEdge!

  """globally unique ID"""
  id: ID!
  transactions: TransactionConnection!
  updatedAt: DateTime!
  user: UserEdge!
}

type GroupMemberConnection {
  edges: [GroupMemberEdge!]!
  pageInfo: PageInfo!
}

type GroupMemberEdge {
  cursor: String
  node: GroupMember
}

type Mutation {
  createGroup(createGroupInput: CreateGroupInput!): Group!
  createOrder(groupID: ID!): OrderEdge!
  createTransaction(input: CreateTransactionInput!): TransactionEdge!
  deleteTransaction(input: DeleteTransactionInput!): ID!
  simulateTransactions(orderID: ID!): [TransactionEdge!]!
  updateOrder(input: UpdateOrderInput!): Order!
  updateTransaction(input: UpdateTransactionInput!): TransactionEdge!
  updateTransactionsMany(input: UpdateTransactionsManyInput!): TransactionConnection!
}

interface Node {
  """globally unique ID"""
  id: ID!
}

type Order implements Node {
  createdAt: DateTime!
  group: GroupEdge!

  """globally unique ID"""
  id: ID!
  isActive: Boolean!
  payer: GroupMemberEdge!
  transactions: TransactionConnection!
  updatedAt: DateTime!
}

type OrderConnection {
  edges: [OrderEdge!]
  pageInfo: PageInfo
}

type OrderEdge {
  cursor: String
  node: Order
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  me: User!
  node(id: ID!): Node
}

type Transaction implements Node {
  createdAt: DateTime!
  group: GroupEdge!

  """globally unique ID"""
  id: ID!
  itemName: String!
  itemPrice: Float
  order: OrderEdge!
  recipient: GroupMemberEdge!
  updatedAt: DateTime!
}

type TransactionConnection {
  edges: [TransactionEdge!]
  pageInfo: PageInfo
}

type TransactionEdge {
  cursor: String
  node: Transaction
}

input UpdateOrderInput {
  id: String!
  isActive: Boolean!
}

input UpdateTransactionInput {
  id: String!
  itemName: String
  itemPrice: Float
}

input UpdateTransactionsManyInput {
  transactions: [UpdateTransactionInput!]!
}

type User implements Node {
  avatarURL: String
  createdAt: DateTime!
  firstName: String!
  groups: GroupMemberConnection!

  """globally unique ID"""
  id: ID!
  lastName: String!
  updatedAt: DateTime!
  username: String!
}

type UserEdge {
  cursor: String
  node: User
}